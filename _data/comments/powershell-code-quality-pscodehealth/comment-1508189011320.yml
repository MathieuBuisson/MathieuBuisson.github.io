_id: 41f2d790-b2b8-11e7-8411-e99c61e7b1a5
message: "Hi Robert,\r\n\r\nI tried to set the metrics thresholds the least arbitrarily as possible. Unfortunately, there is no consensus right now in the PowerShell community on how many lines can be considered too much.  \r\n\r\nSo I had to resort to other sources : the thresholds from other code quality tools targeted at other languages : Java, C#, Python, Ruby, etc...  \r\n\r\nIt turns out the threshold at which a function (or a method) is considered *long* is fairly consistent across code quality tools and many different languages. So if there is legitimate reason for PowerShell to be an exception, it needs to be proven.  \r\n\r\nThat said, these metrics thresholds cannot be set by 1 single person, but should be based on input from the PowerShell community at large. So I'm glad you raise the subject here and if you have suggestions, I invite you to join the discussion on [this issue](https://github.com/MathieuBuisson/PSCodeHealth/issues/8).  \r\n\r\nYes, it is absolutely possible to reduce the number of lines and make the code **less** readable as a result of that. Someone who wants to game the metric will always find a way to do it. This is true for **any** metric.  \r\n\r\nA metric is just a metric and a tool is just a tool. It doesn't exempt us from using our own judgment. And as I said in the article above, we should not write code for metrics, but for the qualities that the metrics attempt to quantify.  \r\n\r\nThe tool doesn't force you to split up functions in an unnatural way. It is **your** choice, **your** design and **your** craft to decide how you structure and modularize your code in a way that make sense to **you** (and hopefully to others)."
name: Mathieu Buisson
email: 25061653796d5c748192c68e2eb6bde8
url: 'https://mathieubuisson.github.io'
hidden: ''
date: '2017-10-16T21:23:31.316Z'
